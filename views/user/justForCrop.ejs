<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fixed Box Image Cropping</title>
  <style>
    #imageContainer {
      position: relative;
      width: 500px;
      height: 500px;
      border: 1px solid #ccc;
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    #uploadedImage {
      position: absolute;
      max-width: none;
      display: none;
    }

    #cropBox {
      position: absolute;
      width: 200px; /* Fixed width */
      height: 200px; /* Fixed height */
      border: 2px dashed #000;
      pointer-events: none; /* Makes the box non-interactive */
    }

    #croppedImage {
      margin-top: 20px;
      border: 1px solid #ccc;
    }
  </style>
</head>
<body>
  <h2>Fixed Box Image Cropping</h2>

  <input type="file" id="imageInput" accept="image/*">
  <div id="imageContainer">
    <img id="uploadedImage" alt="Uploaded Image">
    <div id="cropBox"></div>
  </div>
  <button id="cropButton">Crop Image</button>
  <canvas id="croppedImage"></canvas>

  <script src="script.js"></script>
</body>
</html>


<script>
    document.addEventListener('DOMContentLoaded', () => {
  const imageInput = document.getElementById('imageInput');
  const imageContainer = document.getElementById('imageContainer');
  const uploadedImage = document.getElementById('uploadedImage');
  const cropBox = document.getElementById('cropBox');
  const cropButton = document.getElementById('cropButton');
  const croppedCanvas = document.getElementById('croppedImage');

  let imageOffsetX = 0;
  let imageOffsetY = 0;

  // Load and display the uploaded image
  imageInput.addEventListener('change', (event) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        uploadedImage.src = e.target.result;
        uploadedImage.style.display = 'block';
        uploadedImage.style.left = '0px';
        uploadedImage.style.top = '0px';
        imageOffsetX = 0;
        imageOffsetY = 0;
      };
      reader.readAsDataURL(file);
    }
  });

  // Allow moving the image within the container
  let isDragging = false;
  let startX, startY;

  uploadedImage.addEventListener('mousedown', (e) => {
    isDragging = true;
    startX = e.clientX - imageOffsetX;
    startY = e.clientY - imageOffsetY;
  });

  window.addEventListener('mousemove', (e) => {
    if (isDragging) {
      imageOffsetX = e.clientX - startX;
      imageOffsetY = e.clientY - startY;
      uploadedImage.style.left = `${imageOffsetX}px`;
      uploadedImage.style.top = `${imageOffsetY}px`;
    }
  });

  window.addEventListener('mouseup', () => {
    isDragging = false;
  });

  // Crop the image using the fixed box
  cropButton.addEventListener('click', () => {
    const containerRect = imageContainer.getBoundingClientRect();
    const imageRect = uploadedImage.getBoundingClientRect();
    const cropBoxRect = cropBox.getBoundingClientRect();

    // Calculate cropping coordinates relative to the image
    const cropX = (cropBoxRect.left - imageRect.left) / imageRect.width * uploadedImage.naturalWidth;
    const cropY = (cropBoxRect.top - imageRect.top) / imageRect.height * uploadedImage.naturalHeight;
    const cropWidth = cropBoxRect.width / imageRect.width * uploadedImage.naturalWidth;
    const cropHeight = cropBoxRect.height / imageRect.height * uploadedImage.naturalHeight;

    // Create a canvas and draw the cropped area
    const canvas = croppedCanvas;
    canvas.width = cropWidth;
    canvas.height = cropHeight;
    const ctx = canvas.getContext('2d');
    const img = new Image();
    img.src = uploadedImage.src;
    img.onload = () => {
      ctx.drawImage(img, cropX, cropY, cropWidth, cropHeight, 0, 0, cropWidth, cropHeight);
    };
  });
});

</script>