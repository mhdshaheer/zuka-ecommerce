<%- include('../partials/user/header') %>

    <style>
        .checkout__input p {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .text-dark {
            color: #333;
        }

        .collapsible-content {
            display: none;
            margin-top: 10px;
        }

        .toggle-btn .toggle-payment {
            cursor: pointer;
            font-weight: bold;
            color: #007bff;
        }

        .custom-label {
            font-size: 18px;
            /* Adjust font size for label */
            display: flex;
            align-items: center;
        }

        .custom-label input {
            transform: scale(1.5);
            /* Resize the radio button */
            margin-right: 10px;
            /* Add spacing */
        }


        /* css for cards */
        .address-card {
            border-radius: 10px;
            overflow: hidden;
            border: 1px solid #ddd;
        }

        .address-card-header {
            background-color: #f8f9fa;
            /* Light gray */
            padding: 10px 20px;
            font-weight: bold;
            font-size: 1.25rem;
            border-bottom: 1px solid #ddd;
        }

        .address-card-body {
            padding: 20px;
            background-color: #ffffff;
            /* White */
        }

        .address-card-body p {
            margin-bottom: 0.8rem;
            font-size: 1rem;
            color: #333;
        }

        .address-card-body strong {
            color: #007bff;
            /* Bootstrap primary color */
        }

        .address-card-footer {
            background-color: #f8f9fa;
            border-top: 1px solid #ddd;
            padding: 10px 20px;
            text-align: right;
        }

        .btn-custom {
            margin-left: 10px;
            border-radius: 20px;
        }
    </style>

    <!-- Breadcrumb Section Begin -->
    <section class="breadcrumb-option">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="breadcrumb__text">
                        <h4>Check Out</h4>
                        <div class="breadcrumb__links">
                            <a href="/">Home</a>
                            <a href="/shop">Shop</a>
                            <span>Check Out</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!-- Breadcrumb Section End -->

    <!-- Checkout Section Begin -->
    <section class="checkout spad">
        <div class="container">
            <div class="checkout__form">
                <form>
                    <div class="row">
                        <div class="col-lg-8 col-md-6">
                            <!-- <h6 class="coupon__code"><span class="icon_tag_alt"></span> Have a coupon? <a href="#">Click
                                    here</a> to enter your code</h6> -->
                            <h6 class="checkout__title toggle-btn text-dark" id="toggle-billing">
                                Billing Details
                            </h6>

                            <!-- Collapsible Content -->
                            <div class="collapsible-content" id="billing-details">
                                <div class="row">
                                    <div class="col-lg-6">
                                        <div class="checkout__input">
                                            <p>Name<span>*</span></p>
                                            <input type="text" class="text-dark" id="name">
                                            <div id="nameError"></div>
                                        </div>
                                    </div>

                                    <div class="col-lg-6">
                                        <div class="checkout__input">
                                            <p>Phone<span>*</span></p>
                                            <input type="number" value="" class="text-dark" id="phone">
                                            <div id="phoneError"></div>
                                        </div>
                                    </div>
                                    <div class="col-lg-6">
                                        <div class="checkout__input">
                                            <p>Alternative Phone</p>
                                            <input type="number" value="" class="text-dark" id="altPhone">
                                        </div>
                                    </div>
                                    <div class="col-lg-6 mb-2">
                                        <div class="checkout__input">
                                            <p>Address Type<span>*</span></p>
                                            <select class="form-control text-dark" id="addressType">
                                                <option value="" disabled selected>Select Address Type</option>
                                                <option value="Home">Home</option>
                                                <option value="Work">Work</option>
                                                <option value="Other">Other</option>
                                            </select>
                                            <div id="addressTypeError"></div>
                                        </div>
                                    </div>
                                </div>
                                <div class="checkout__input">
                                    <p>Address<span>*</span></p>
                                    <input type="text" placeholder="Street Address"
                                        class="checkout__input__add text-dark" id="address">
                                    <div id="addressError"></div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-3">
                                        <div class="checkout__input">
                                            <p>Country<span>*</span></p>
                                            <input type="text" class="text-dark" id="country">
                                            <div id="countryError"></div>
                                        </div>
                                    </div>
                                    <div class="col-lg-3">
                                        <div class="checkout__input">
                                            <p>State<span>*</span></p>
                                            <input type="text" class="text-dark" id="state">
                                            <div id="stateError"></div>
                                        </div>
                                    </div>
                                    <div class="col-lg-3">
                                        <div class="checkout__input">
                                            <p>City/Town<span>*</span></p>
                                            <input type="text" class="text-dark" id="city">
                                            <div id="cityError"></div>
                                        </div>
                                    </div>
                                    <div class="col-lg-3">
                                        <div class="checkout__input">
                                            <p>Pincode/ZIP<span>*</span></p>
                                            <input type="number" class="text-dark" id="pincode">
                                            <div id="pincodeError"></div>
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <button class="btn btn-dark py-3 px-5 mb-5 " id="addBtn">Add</button>
                                </div>
                                <div class="row">
                                    <%if(userAddress){%>
                                        <% userAddress.address.map((item, index)=> { %>
                                            <div class="card shadow-sm col-4 m-2">
                                                <div class="card-body">
                                                    <div class="form-check">
                                                        <input class="form-check-input text-danger" type="radio"
                                                            name="selectedAddress" id="address_<%= index %>"
                                                            value="<%= index %>" data-item='<%= JSON.stringify(item) %>'
                                                            onclick="selectAddress(this)">
                                                        <label class="form-check-label" for="address_<%= index %>">
                                                            <b>Select </b>
                                                        </label>
                                                    </div>
                                                    <hr>
                                                    <h5 class="card-title">
                                                        <b>
                                                            <%= item.addressType %> Address
                                                        </b>
                                                    </h5>
                                                    <p class="card-text">
                                                        <strong>Name:</strong>
                                                        <%= item.name %><br>
                                                            <strong>Address:</strong>
                                                            <%= item.address %><br>
                                                                <strong>City:</strong>
                                                                <%= item.city %><br>
                                                                    <strong>State:</strong>
                                                                    <%= item.state %><br>
                                                                        <strong>ZIP Code:</strong>
                                                                        <%= item.pincode %><br>
                                                                            <strong>Phone:</strong>
                                                                            <%= item.phone %>
                                                    </p>

                                                </div>
                                            </div>
                                            <% }) %>
                                                <%}else{%>
                                                    <div class="card shadow-sm col-4 m-2">
                                                        <div class="card-body">
                                                            <div>No saved address found</div>
                                                        </div>
                                                    </div>
                                                    <%}%>
                                </div>

                                <!-- <div>
                                    <button class="btn btn-dark py-3 px-5 mb-5 ">Next</button>
                                </div> -->
                            </div>
                            <h6 class="checkout__title toggle-btn text-dark mt-3" id="toggle-payment">
                                Payment Details
                            </h6>

                            <!-- Collapsible Content -->
                            <div class="collapsible-content" id="payment-details">

                                <div class="my-4">
                                    <label class="custom-label">
                                        <input type="radio" name="paymentMethod" value="Wallet"
                                            class="form-check-input ml-2">
                                        <span class="pl-5">Wallet <span class="fs-6 text-secondary">Rs:
                                                <%=wallet?.balance?wallet.balance.toFixed(2):0%>
                                            </span></span>

                                    </label>
                                </div>
                                <% const priceTotal=userCart.items.reduce((acc, curr)=> acc + curr.totalPrice, 0);
                                    const priceFinal = priceTotal >= couponMin ? (priceTotal - couponDiscount) :
                                    priceTotal;
                                    %>
                                    <%if(priceFinal<=1000){%>
                                        <div class="my-4">
                                            <label class="custom-label">
                                                <input type="radio" name="paymentMethod" value="Cash on Delivery"
                                                    class="form-check-input ml-2">
                                                <span class="pl-5">Cash on Delivery </span>
                                            </label>
                                        </div>
                                        <%}%>
                                            <div class="my-4">
                                                <label class="custom-label">
                                                    <input type="radio" name="paymentMethod"
                                                        class="form-check-input ml-2" value="Razorpay">
                                                    <span class="pl-5">Razorpay</span>
                                                </label>
                                            </div>
                                            <!-- <div class="my-4">
                                    <label class="custom-label">
                                        <input type="radio" name="options" class="form-check-input ml-2">
                                        <span class="pl-5">Credit or debit card</span>
                                    </label>
                                </div>
                                <div class="row ml-5">
                                    <div class="col-lg-6">
                                        <div class="checkout__input">
                                            <input type="text" class="text-dark" placeholder="Card Number">
                                        </div>
                                    </div>

                                </div>
                                <div class="row ml-5">
                                    <div class="col-lg-3">
                                        <div class="checkout__input">
                                            <input type="text" class="text-dark" placeholder="MM/YY">
                                        </div>
                                    </div>
                                    <div class="col-lg-3">
                                        <div class="checkout__input">
                                            <input type="text" class="text-dark" placeholder="CVC">
                                        </div>
                                    </div>
                                </div> -->
                                            <!-- <div class="my-4">
                                    <label class="custom-label">
                                        <input type="radio" name="options" class="form-check-input ml-2">
                                        <span class="pl-5">Gpay </span>
                                    </label>
                                </div> -->
                                            <!-- <div>
                                    <button id="submitBtn" class="btn btn-dark py-3 px-5 mb-5 ml-5">Next</button>
                                </div> -->
                            </div>

                        </div>
                        <div class="col-lg-4 col-md-6">
                            <div class="checkout__order">
                                <h4 class="order__title">Your order</h4>
                                <div class="checkout__order__products">Product <span>Total</span></div>
                                <ul class="checkout__total__products">
                                    <%userCart.items.map((item,index)=>{%>
                                        <li>
                                            <%=index+1%>. <%=item.productId.productName%> <span>
                                                        ₹<%=item.totalPrice.toFixed(2)%>
                                                    </span>
                                        </li>
                                        <%})%>
                                            <!-- <li>02. German chocolate <span>170.00</span></li>
                                    <li>03. Sweet autumn <span>170.00</span></li>
                                    <li>04. Cluten free mini dozen <span>110.00</span></li> -->
                                </ul>
                                <ul class="checkout__total__all">
                                    <li>Subtotal <span class="text-dark">₹ <%=(userCart.items.reduce((acc,curr)=>
                                                acc+curr.totalPrice,0).toFixed(2))%></span></li>
                                    <li>Discount <span>-₹ <%=couponDiscount%></span></li>
                                    <%if(priceFinal>=500){%>
                                        <li>Delivery charge <span class="text-dark">Free</span></li>
                                        <%}else{%>
                                            <li>Delivery charge <span>+ ₹ 40</span></li>
                                            <%}%>
                                                <li>Total:<span id="totalAmount" class="text-dark">

                                                        <!-- ₹ <%=userCart.items.reduce((acc,curr)=>acc+curr.totalPrice,0)%> -->
                                                        <% const totalPrice=userCart.items.reduce((acc, curr)=> acc +
                                                            curr.totalPrice, 0);
                                                            const finalPrice = totalPrice >= couponMin ? (totalPrice -
                                                            couponDiscount) : totalPrice;
                                                            %>
                                                            <%if(finalPrice<=500){%>
                                                                <%= finalPrice+40 %>
                                                                    <%}else{%>
                                                                        <%= finalPrice %>
                                                                            <%}%>
                                                    </span></li>
                                </ul>

                                <button id="placeOrder" type="submit" class="site-btn">PLACE
                                    ORDER</button>

                            </div>
                        </div>

                    </div>


            </div>
            </form>

        </div>
        </div>
    </section>
    <!-- Checkout Section End -->
    </body>

    </html>
    <script>
        // JavaScript to toggle visibility
        const toggleBtn = document.getElementById('toggle-billing');
        const billingDetails = document.getElementById('billing-details');

        toggleBtn.addEventListener('click', () => {
            if (billingDetails.style.display === 'none' || billingDetails.style.display === '') {
                billingDetails.style.display = 'block'; // Show details
            } else {
                billingDetails.style.display = 'none'; // Hide details
            }
        });
    </script>
    <script>
        // JavaScript to toggle visibility
        const paymentToggleBtn = document.getElementById('toggle-payment');
        const paymentDetails = document.getElementById('payment-details');

        paymentToggleBtn.addEventListener('click', () => {
            if (paymentDetails.style.display === 'none' || paymentDetails.style.display === '') {
                paymentDetails.style.display = 'block'; // Show details
            } else {
                paymentDetails.style.display = 'none'; // Hide details
            }
        });
    </script>

    

    <script>
        let addressObj = null;

        let selectAddress = (radioButton) => {
            const selectedIndex = radioButton.value;
            const selectedItem = JSON.parse(radioButton.getAttribute('data-item'));

            console.log("Selected Address Index:", selectedIndex);
            console.log("Selected Address Details:", selectedItem);
            addressObj = {
                index: selectedIndex,
                address: selectedItem
            }
        }

        document.getElementById('placeOrder').addEventListener('click', async (e) => {
            e.preventDefault();
            const selectedOption = document.querySelector('input[name="paymentMethod"]:checked');
            let totalAmount = document.getElementById('totalAmount').textContent;
            console.log("total amount is:", totalAmount, typeof totalAmount, Number(totalAmount))

            if (!addressObj) {
                Swal.fire({
                    title: 'Address Missing!',
                    text: 'Please choose an address!',
                    icon: 'warning',
                    confirmButtonText: 'Okay'
                });
                return;
            }

            if (!selectedOption) {
                Swal.fire({
                    title: 'Payment Method Missing!',
                    text: 'Please choose a payment method!',
                    icon: 'warning',
                    confirmButtonText: 'Okay'
                });
                return;
            }

            console.log("Selected Address:", addressObj);
            console.log("Selected Payment Method:", selectedOption.value);

            // Proceed with payment flow based on the selected payment method
            try {
                if (selectedOption.value === "Razorpay") {
                    // Create Razorpay order on the server
                    console.log("it is razorPay")
                    const { data } = await axios.post('/payment/createRazorpayOrder', {
                        totalPrice: Number(totalAmount),
                        address: addressObj.address,
                        index: addressObj.index
                    });

                    console.log("Razorpay Order Data:", data);

                    // Initialize Razorpay checkout
                    // const options = {
                    //     key: data.key,
                    //     amount: data.order.amount,
                    //     currency: data.order.currency,
                    //     name: "Zuka Sports",
                    //     description: "Order Payment",
                    //     order_id: data.order.id,
                    //     handler: async function (response) {
                    //         console.log("Payment Successful!", response);

                    //         // Verify payment on the server
                    //         const verification = await axios.post('/payment/verifyRazorpayPayment', {
                    //             razorpay_order_id: response.razorpay_order_id,
                    //             razorpay_payment_id: response.razorpay_payment_id,
                    //             razorpay_signature: response.razorpay_signature,
                    //             // paymentDetails: response,
                    //             totalPrice: Number(totalAmount),
                    //             address: addressObj.address,
                    //             index: addressObj.index,
                    //             order_id:data.order_id

                    //         });
                    //         console.log("verification done")

                    //         if (verification.data.success) {
                    //             Swal.fire({
                    //                 title: 'Success!',
                    //                 text: 'Payment completed successfully!',
                    //                 icon: 'success',
                    //                 confirmButtonText: 'Okay'
                    //             }).then(() => {
                    //                 window.location.href = `/orderSuccess?id=${verification.data.orderId}`;
                    //                 // window.location.href = `/orderSuccessff?id=${985034285}`;
                    //             });
                    //         } else {
                    //             Swal.fire({
                    //                 title: 'Verification Failed!',
                    //                 text: 'Payment verification failed. Please contact support.',
                    //                 icon: 'error',
                    //                 confirmButtonText: 'Okay'
                    //             });
                    //         }
                    //     },
                    //     theme: {
                    //         color: "#3399cc"
                    //     }
                    // };
                    const options = {
                        key: data.key,
                        amount: data.order.amount,
                        currency: data.order.currency,
                        name: "Zuka Sports",
                        description: "Order Payment",
                        order_id: data.order.id,
                        handler: async function (response) {
                            console.log("Payment Successful!", response);

                            // Verify payment on the server
                            const verification = await axios.post('/payment/verifyRazorpayPayment', {
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_signature: response.razorpay_signature,
                                totalPrice: Number(totalAmount),
                                address: addressObj.address,
                                index: addressObj.index,
                                order_id: data.order_id
                            });
                            console.log("verification done");

                            if (verification.data.success) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Payment completed successfully!',
                                    icon: 'success',
                                    confirmButtonText: 'Okay'
                                }).then(() => {
                                    window.location.href = `/orderSuccess?id=${verification.data.orderId}`;
                                });
                            } else {
                                Swal.fire({
                                    title: 'Verification Failed!',
                                    text: 'Payment verification failed. Please contact support.',
                                    icon: 'error',
                                    confirmButtonText: 'Okay'
                                });
                            }
                        },
                        modal: {
                            ondismiss: function () {
                                Swal.fire({
                                    title: 'Payment Failed!',
                                    text: 'Your last payment was failed',
                                    icon: 'error',
                                    confirmButtonText: 'Go to Orders'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = "/orders";
                                    }
                                });
                            }
                        },
                        theme: {
                            color: "#FF0000"
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                } else {

                    //     Swal.fire({
                    //         title: "Place Order?",
                    //         text: "Are you sure you want to confirm this order?",
                    //         icon: "warning",
                    //         showCancelButton: true,
                    //         confirmButtonColor: "#3085d6",
                    //         cancelButtonColor: "#d33",
                    //         confirmButtonText: "Yes, Place Order!",
                    //         cancelButtonText: "No, Cancel"
                    //     }).then(async result => {
                    //         if (result.isConfirmed) {

                    //             const response = await axios.post('/placeOrder', {
                    //                 totalPrice: Number(totalAmount),
                    //                 address: addressObj.address,
                    //                 paymentMethod: selectedOption.value,
                    //                 index: addressObj.index
                    //             });

                    //             if (response.status === 200) {
                    //                 let id = response.data.orderId;
                    //                 console.log("Order ID:", id);
                    //                 window.location.href = `/orderSuccess?id=${id}`;
                    //             }
                    //             if (response &&response.status == 402) {
                    //     Swal.fire({
                    //         icon: 'error',
                    //         title: 'Insufficient Balance',
                    //         text: response.data.message,
                    //     })
                    // } 

                    //         }
                    //     })
                    const token = localStorage.getItem("authToken");
                    Swal.fire({
                        title: "Place Order?",
                        text: "Are you sure you want to confirm this order?",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "Yes, Place Order!",
                        cancelButtonText: "No, Cancel",
                    }).then(async (result) => {
                        if (result.isConfirmed) {
                            try {
                                const response = await axios.post(
                                    '/placeOrder',
                                    {
                                        totalPrice: Number(totalAmount),
                                        address: addressObj.address,
                                        paymentMethod: selectedOption.value,
                                        index: addressObj.index,
                                    },
                                    {
                                        headers: {
                                            Authorization: `Bearer ${token}`, // Ensure the token is valid
                                        },
                                    }
                                );

                                if (response.status === 200) {
                                    const id = response.data.orderId;
                                    window.location.href = `/orderSuccess?id=${id}`;
                                }
                            } catch (error) {
                                console.error("Axios error:", error);

                                if (error.response) {
                                    if (error.response.status === 401) {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Blocked',
                                            text: 'Cart contains Blocked Prouct',
                                        });
                                    } else if (error.response.status === 402) {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Insufficient Balance',
                                            text: error.response.data.message || 'Payment failed due to insufficient balance.',
                                        });
                                    } else {
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: error.response.data.message || 'Something went wrong.',
                                        });
                                    }
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error',
                                        text: 'Something went wrong. Please try again later.',
                                    });
                                }
                            }
                        }
                    });

                }

            } catch (error) {
                console.error("Error during payment:", error);
                if (error.response && error.response.status == 402) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Insufficient Balance',
                        text: error.response.data.message,
                    })
                } else if (error.response.status == 401) {
                    console.log("have blocked")
                    Swal.fire({
                        icon: 'error',
                        title: 'Insufficient Balance',
                        text: error.response.data.message,
                    })
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Something went wrong. Please try again later.',
                        icon: 'error',
                        confirmButtonText: 'Okay'
                    });
                }
            }
        });
    </script>


    <script>
        //add address
        const addBtn = document.getElementById('addBtn');
        const name = document.getElementById('name');
        const phone = document.getElementById('phone');
        const altPhone = document.getElementById('altPhone');
        const addressType = document.getElementById('addressType');
        const address = document.getElementById('address');
        const country = document.getElementById('country');
        const state = document.getElementById('state');
        const city = document.getElementById('city');
        const pincode = document.getElementById('pincode');

        addBtn.addEventListener('click', (e) => {
            e.preventDefault();
            console.log("inside button click")

            //=============================
            function validateAddressForm() {
                const nameError = document.getElementById('nameError');
                const phoneError = document.getElementById('phoneError');
                const addressTypeError = document.getElementById('addressTypeError');
                const addressError = document.getElementById('addressError');
                const cityError = document.getElementById('cityError');
                const pincodeError = document.getElementById('pincodeError');
                const countryError = document.getElementById('countryError');
                const stateError = document.getElementById('stateError');

                const nameRegex = /^[a-zA-Z\s]{1,50}$/;
                const phoneRegex = /^[0-9]{10}$/;
                const addressRegex = /^[a-zA-Z0-9\s,.-]{1,255}$/;
                const cityRegex = /^[a-zA-Z\s]+$/;
                const pincodeRegex = /^[0-9]{6}$/;


                if (!nameRegex.test(name.value.trim())) {
                    nameError.style.color = "red";
                    nameError.innerHTML = "Invalid name. Please enter only alphabets";
                    name.focus();
                    return false;
                } else {
                    nameError.innerHTML = "";

                }

                if (!phoneRegex.test(phone.value.trim())) {
                    phoneError.style.color = "red";
                    phoneError.innerHTML = "Invalid phone number. Please enter a 10-digit number.";
                    phone.focus();
                    return false;
                } else {
                    phoneError.innerHTML = "";
                }

                if (addressType.value.trim() === "") {
                    addressTypeError.style.color = "red";
                    addressTypeError.innerHTML = "Please select an address type.";
                    addressType.focus();
                    return false;
                } else {
                    addressTypeError.innerHTML = "";
                }

                if (!addressRegex.test(address.value.trim())) {
                    addressError.style.color = "red";
                    addressError.innerHTML = "Invalid address. Please check for special characters.";
                    address.focus();
                    return false;
                } else {
                    addressError.innerHTML = "";
                }

                if (country.value.trim() === "") {
                    countryError.style.color = "red";
                    countryError.innerHTML = "Please select a country.";
                    country.focus();
                    return false;
                } else {
                    countryError.innerHTML = "";
                }

                if (state.value.trim() === "") {
                    stateError.style.color = "red";
                    stateError.innerHTML = "Please select a state.";
                    state.focus();
                    return false;
                } else {
                    stateError.innerHTML = "";
                }

                if (!cityRegex.test(city.value.trim())) {
                    cityError.style.color = "red";
                    cityError.innerHTML = "Invalid city. Please enter only alphabets.";
                    city.focus();
                    return false;
                } else {
                    cityError.innerHTML = "";
                }

                if (!pincodeRegex.test(pincode.value.trim())) {
                    pincodeError.style.color = "red";
                    pincodeError.innerHTML = "Invalid pincode. Please enter a 6-digit number.";
                    pincode.focus();
                    return false;
                } else {
                    pincodeError.innerHTML = "";
                }
                return true;
            }
            //=============================
            if (validateAddressForm()) {
                console.log("inside validate")

                axios.post('/addAddress', {
                    name: name.value,
                    // email:email.value,
                    phone: phone.value,
                    altPhone: altPhone.value,
                    addressType: addressType.value,
                    address: address.value,
                    country: country.value,
                    state: state.value,
                    city: city.value,
                    pincode: pincode.value
                }).then(res => {
                    if (res.status == 200) {
                        Swal.fire({
                            title: 'Success!',
                            text: 'Address added successfully!',
                            icon: 'success',
                            confirmButtonText: 'Okay'
                        }).then(() => {
                            window.location.reload()
                        })
                    }
                })
            }
        })
    </script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <%- include('../partials/user/footer') %>
