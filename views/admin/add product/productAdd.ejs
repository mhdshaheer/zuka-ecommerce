<%-include('../../views/partials/admin/adminHeader')%>
    <style>
        .spinner {
            border: 5px solid #f3f3f3;
            /* Light grey */
            border-top: 5px solid #3498db;
            /* Blue */
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }
    </style>
    <!-- CSS -->
    <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.css" rel="stylesheet">

    <!-- JS -->
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.12/dist/cropper.min.js"></script>
    <section class="content-main">
        <div class="row">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                  
                </div>
            </div>
            <div class="col-9 ">

                <div class="card ">
                    <div class="card-body">
                        <div class="row gx-5">

                            <div class="col-lg-9">
                                <section class="content-body  p-xl-4">
                                    <form id="productForm">
                                        <div class="row mb-4 ">
                                            <label class="col-lg-3 col-form-label">Product name*</label>
                                            <div class="col-lg-9">
                                                <input id="productName" name="productName" type="text"
                                                    class="form-control" placeholder="Type here" />

                                                <div id="productError" class="text-danger"></div>
                                            </div>
                                            <!-- col.// -->
                                        </div>
                                        <!-- row.// -->
                                        <div class="row mb-4">
                                            <label class="col-lg-3 col-form-label">Description*</label>
                                            <div class="col-lg-9">
                                                <textarea id="description" name="description" class="form-control"
                                                    placeholder="Type here" rows="4"></textarea>
                                                <div id="descriptionError" class="text-danger"></div>
                                            </div>
                                            <!-- col.// -->
                                        </div>
                                        <div class="row mb-4">
                                            <label class="col-lg-3 col-form-label">Categories</label>
                                            <div class="col-lg-9">
                                                <select id="category" name="subcategoryf" class="form-control"
                                                    aria-label="Product name">
                                                    <option value="" disabled selected>Select a Category</option>
                                                    <%for(let i=0;i<categories.length;i++){%>
                                                        <option>
                                                            <%=locals.categories[i].name%>
                                                        </option>
                                                        <%}%>
                                                </select>
                                                <div id="categoryError" class="text-danger"></div>
                                            </div>
                                            <!-- col.// -->
                                        </div>
                                        
                                        <div class="row mb-4">
                                            <label class="col-lg-3 col-form-label">Price</label>
                                            <div class="col-lg-4">
                                                <input type="number" id="price" name="price" class="form-control"
                                                    placeholder="Eg:123" />
                                                <div id="priceError" class="text-danger"></div>
                                            </div>
                                            <!-- col.// -->
                                        </div>
                                        <div class="row mb-4">
                                            <label class="col-lg-3 col-form-label">Offer Price</label>
                                            <div class="col-lg-4">
                                                <input type="number" id="offerPrice" name="offerPrice"
                                                    class="form-control" placeholder="Eg:123" value="0" />
                                                <div id="offerPriceError" class="text-danger"></div>
                                            </div>
                                            <!-- col.// -->
                                        </div>
                                        <br />
                                        <hr>
                                        <br>
                                        <div class="row mb-4">
                                            <label class="col-lg-3 col-form-label">Colour*</label>
                                            <div class="col-lg-9">
                                                <input type="text" id="colour" name="colour" class="form-control"
                                                    placeholder="Type here" />
                                                <div id="colourError" class="text-danger"></div>
                                            </div>
                                            <!-- col.// -->
                                        </div>
                                        <!-- ====================================================================================== -->
                                        <div class="row mb-4">
                                            <label class="col-lg-3 col-form-label">Product Images*</label>
                                            <div class="col-lg-9">
                                                <div id="image-list">
                                                    <!-- Image Upload 1 -->
                                                    <div class="d-flex align-items-center mb-4" id="image-container-1">
                                                        <input id="images-1" type="file" class="form-control me-3"
                                                            name="images" accept="image/*" style="max-width: 70%;">
                                                        <div id="preview-1"
                                                            style="border: 1px dashed #ccc; padding: 10px; text-align: center; width: 200px;">
                                                            No image uploaded
                                                        </div>
                                                        <button type="button" id="cropButton-1" class="btn btn-primary ms-3"
                                                            data-bs-toggle="modal"
                                                            data-bs-target="#cropModal">Crop</button>
                                                    </div>
                                                    <!-- Image Upload 2 -->
                                                    <div class="d-flex align-items-center mb-4" id="image-container-2">
                                                        <input id="images-2" type="file" class="form-control me-3"
                                                            name="images" accept="image/*" style="max-width: 70%;">
                                                        <div id="preview-2"
                                                            style="border: 1px dashed #ccc; padding: 10px; text-align: center; width: 200px;">
                                                            No image uploaded
                                                        </div>
                                                        <button type="button" id="cropButton-2" class="btn btn-primary ms-3"
                                                            data-bs-toggle="modal"
                                                            data-bs-target="#cropModal">Crop</button>
                                                    </div>
                                                    <!-- Image Upload 3 -->
                                                    <div class="d-flex align-items-center mb-4" id="image-container-3">
                                                        <input id="images-3" type="file" class="form-control me-3"
                                                            name="images" accept="image/*" style="max-width: 70%;">
                                                        <div id="preview-3"
                                                            style="border: 1px dashed #ccc; padding: 10px; text-align: center; width: 200px;">
                                                            No image uploaded
                                                        </div>
                                                        <button type="button" id="cropButton-3" class="btn btn-primary ms-3"
                                                            data-bs-toggle="modal"
                                                            data-bs-target="#cropModal">Crop</button>
                                                    </div>
                                                    <!-- Image Upload 4 -->
                                                    <div class="d-flex align-items-center mb-4" id="image-container-4">
                                                        <input id="images-4" type="file" class="form-control me-3"
                                                            name="images" accept="image/*" style="max-width: 70%;">
                                                        <div id="preview-4"
                                                            style="border: 1px dashed #ccc; padding: 10px; text-align: center; width: 200px;">
                                                            No image uploaded
                                                        </div>
                                                        <button type="button" id="cropButton-4" class="btn btn-primary ms-3"
                                                            data-bs-toggle="modal"
                                                            data-bs-target="#cropModal">Crop</button>
                                                    </div>

                                                    <!-- Repeat for other image inputs (Image Upload 2, 3, 4) -->
                                                </div>
                                            </div>
                                        </div>


                                        <br>
                                        <hr>
                                        <br>

                                        <div class="row mb-4">

                                            <div class="col-lg-3">

                                                <label class="col-form-label">Add Variant*</label>
                                            </div>
                                            <div class="col-lg-6">
                                                <button type="button" class="btn btn-primary" id="editProductBtn"
                                                    onclick="openEditModal()">Add Variant</button>
                                            </div>
                                        </div>
                                        <br>
                                        <!-- table -->
                                        <table class="table table-bordered" >
                                            <thead>
                                                <tr>
                                                    <th>Size</th>
                                                    <th>Stocks</th>
                                                    <th>Price</th>
                                                    <th>Status</th>
                                                    <th>Delete</th>
                                                </tr>
                                            </thead>
                                            <tbody id="tbody">

                                                <tr>
                                                    <td>N/A</td>
                                                    <td>N/A</td>
                                                    <td>N/A</td>
                                                    <td>
                                                        <span class="badge rounded-pill alert-success">Added</span>
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-danger btn-sm"
                                                            >Delete</button>
                                                    </td>
                                                </tr>

                                            </tbody>
                                        </table>

                                        <!-- table end -->
                                        <br>
                                        <hr>
                                        <br>
                                        <br />
                                        <button class="btn btn-primary" type="submit">Continue to next</button>
                                    </form>
                                </section>
                                <hr>
                                <!-- content-body .// -->
                            </div>
                            <!-- col.// -->
                        </div>
                        <!-- content-body .// -->
                    </div>
                    <!-- col.// -->
                </div>
                <!-- row.// -->
            </div>
            <!-- card body end// -->
        </div>
        </div>
        </div>
    </section>

    <!--===========modal==============  -->
    <!-- Modal to Edit Product -->
    <div class="modal fade" id="editProductModal" tabindex="-1" aria-labelledby="editProductModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editProductModalLabel">Add Product Variants</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Edit Product Form -->
                    <form id="editProductForm">
                        <div class="mb-3">
                            <label for="productSize" class="form-label">Size</label>
                            <input type="text" class="form-control" id="varientSize" placeholder="Enter size">
                        </div>
                        <div class="mb-3">
                            <label for="productStocks" class="form-label">Stocks</label>
                            <input type="number" class="form-control" id="varientStock"
                                placeholder="Enter stock quantity">
                        </div>
                        <div class="mb-3">
                            <label for="productPrice" class="form-label">Price</label>
                            <input type="number" class="form-control" id="varientPrice" placeholder="Enter price">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="saveProductChanges">Save
                        changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ==========modal end============== -->
    <!-- loading animation -->
    <div id="loading-spinner"
        style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999;">
        <div class="spinner"></div>
    </div>
    <!-- loading animation -->

    <footer class="main-footer font-xs">
        <div class="row pb-30 pt-15">
            <div class="col-sm-6">
                <script>
                    document.write(new Date().getFullYear());
                </script>
                &copy; Zuka sports - Ecommerce.
            </div>
            <div class="col-sm-6">
                <div class="text-sm-end">All rights reserved</div>
            </div>
        </div>
    </footer>
    <!-- ======================crop modal======================== -->
    <!-- Crop Modal -->
    <div class="modal fade" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center">
                    <canvas id="cropCanvas" style="max-width: 100%; max-height: 500px;"></canvas>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button id="saveCrop" type="button" class="btn btn-primary">Save Crop</button>
                </div>
            </div>
        </div>
    </div>

    <!-- ======================crop modal======================== -->
    </main>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="assets/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="assets/js/vendors/select2.min.js"></script>
    <script src="assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="assets/js/vendors/jquery.fullscreen.min.js"></script>
    <!-- Main Script -->
    <script src="assets/js/main.js?v=1.1" type="text/javascript"></script>

    <script>
        function openEditModal() {
            var myModal = new bootstrap.Modal(document.getElementById('editProductModal'));
            myModal.show();
        }
        const name = document.getElementById('productName')
        const description = document.getElementById('description');
        const category = document.getElementById('category');
        const subcategory = document.getElementById('subcategory');
        const price = document.getElementById('price');
        const offerPrice = document.getElementById('offerPrice');
        const colour = document.getElementById('colour');
        const images = document.getElementById('images');
        const status = document.getElementById('status');

        const productForm = document.getElementById('productForm');
        const productError = document.getElementById('productError');


        const validPattern = /^[A-Za-z0-9\s]+$/;
        const validLetter = /^[A-Za-z]/;
        const validCharsPattern = /^[A-Za-z0-9\s]+$/;

        //Product Name Validation
        function validateProductName(nameVal) {
            console.log('inside validate')
            const minLength = 3;
            const maxLength = 30;

            console.log("name value is :", nameVal)

            if (nameVal.trim() == '') {
                productError.style.display = 'block';
                productError.innerHTML = 'Product name is required';
                return false
            } else if (nameVal.length < minLength || nameVal.length > maxLength) {
                productError.style.display = 'block';
                productError.innerHTML = `Product name must be between ${minLength} and ${maxLength} characters`;
                return false
            } else if (!validLetter.test(nameVal)) {
                productError.style.display = 'block';
                productError.innerHTML = 'Product name must start with a letter.';
                return false
            } else if (!validCharsPattern.test(nameVal)) {
                productError.style.display = 'block';
                productError.innerHTML = 'Product name can only contain letters, numbers, and spaces.';
                return false
            } else if (!validPattern.test(nameVal)) {
                productError.style.display = 'block';
                productError.innerHTML = 'Product name can only contain letters, numbers, and spaces';
                return false
            } else {
                productError.style.display = 'none';
                productError.innerHTML = '';
                return true
            }
        }

        //Product Description Validation
        function validateProductDescription(descVal) {

            const errorElement = document.getElementById('descriptionError');
            // Validation rules
            if (descVal.trim() == '') {
                errorElement.style.display = 'block'
                errorElement.innerHTML = 'Description cannot be empty.';
                return false
            } else if (descVal.trim().length < 10) {
                errorElement.style.display = 'block'
                errorElement.innerHTML = 'Description must be at least 10 characters long.';
                return false
            } else if (descVal.trim().length > 300) {
                errorElement.style.display = 'block'
                errorElement.innerHTML = 'Description cannot exceed 300 characters.';
                return false
            } else {
                errorElement.style.display = 'none'
                errorElement.innerHTML = '';
                return true
            }
        }

        //Category Validation
        function validateCategory(categoryVal) {
            const errorField = document.getElementById('categoryError');
            const category = document.getElementById('category');
            if (!categoryVal) {
                errorField.style.display = 'block';
                errorField.innerHTML = 'Please select a category';
                category.focus();
                return false
            }

            errorField.style.display = 'none'; // Hide the error if valid
            return true; // Allow form submission
        }


        //Subcategory Validation
        function validateSubCategory(subCategoryVal) {
            const errorField = document.getElementById('subCategoryError');
            const subcategory = document.getElementById('subcategory');
            if (!subCategoryVal) {
                errorField.style.display = 'block';
                errorField.innerHTML = 'Please select a sub category';
                subcategory.focus();
                return false
            }

            errorField.style.display = 'none'; // Hide the error if valid
            return true; // Allow form submission
        }



        //Price validation
        function validatePrice(priceVal) {
            const errorField = document.getElementById('priceError');
            const price = document.getElementById('price');
            if (!priceVal) {
                errorField.style.display = 'block';
                errorField.innerHTML = 'Enter the price';
                price.focus();
                return false
            } else if (priceVal == 0) {
                errorField.style.display = 'block';
                errorField.innerHTML = 'Price not zero';
                price.focus();
                return false
            }

            errorField.style.display = 'none'; // Hide the error if valid
            return true; // Allow form submission
        }

        //OfferPrice validation
        function validateOfferPrice(offerPriceVal) {
            const errorField = document.getElementById('offerPriceError');
            const offerPrice = document.getElementById('offerPrice');
            if (!offerPriceVal) {
                errorField.style.display = 'block';
                errorField.innerHTML = 'Enter the offer price';
                offerPrice.focus();
                return false
            }

            errorField.style.display = 'none'; // Hide the error if valid
            return true; // Allow form submission
        }

        //Colour Validation
        function validateColour(colourVal) {
            console.log('inside validate')
            const minLength = 3;
            const maxLength = 30;
            const colourError = document.getElementById('colourError')

            console.log("name value is :", colourVal)

            if (colourVal.trim() === '') {
                colourError.style.display = 'block';
                colourError.innerHTML = 'This Field is required';
                return false
            } else if (colourVal.length < minLength || colourVal.length > maxLength) {
                colourError.style.display = 'block';
                colourError.innerHTML = `Field value must be between ${minLength} and ${maxLength} characters`;
                return false
            } else if (!/^[A-Za-z]/.test(colourVal)) {
                colourError.style.display = 'block';
                colourError.innerHTML = 'Field value must start with a letter.';
                return false
            } else if (!/^[A-Za-z\s]+$/.test(colourVal)) {
                colourError.style.display = 'block';
                colourError.innerHTML = 'Field value can only contain letters and spaces.';
                return false
            } else {
                colourError.style.display = 'none';
                colourError.innerHTML = '';
                return true
            }
        }
        function variantValidation(){
            if(variantArray.length<=0){
                 Swal.fire({
                            title: 'Error!',
                            text: 'Variant is Required!',
                            icon: 'error',
                            confirmButtonText: 'Okay'
                        })
                    return false
            }else{
                return true
            }
        }
        productForm.addEventListener('submit', (e) => {
            e.preventDefault()
            console.log("array is ", variantArray)
            function validateAll() {
                if (
                    !validateProductName(name.value) ||
                    !validateProductDescription(description.value) ||
                    !validateCategory(category.value) ||
                    !validatePrice(price.value) ||
                    !validateOfferPrice(offerPrice.value) ||
                    !validateColour(colour.value)||
                    !variantValidation()
                ) {
                    return false
                }
                return true
            }
            // variant validation
            
            // =============================
            if (validateAll()) {
                let image1 = document.getElementById("images-1").files[0]
                console.log(image1)
                //form data
                const formData = new FormData();
                console.log('after form1')
                formData.append('name', name.value);
                formData.append('description', description.value)
                formData.append('category', category.value)
                // formData.append('subcategory', subcategory.value)
                formData.append('price', price.value)
                formData.append('offerPrice', offerPrice.value)
                formData.append('colour', colour.value)
                formData.append('varient', variantArray)
                console.log("varient array is:", variantArray);

                variantArray.forEach((obj, index) => {
                    formData.append(`variant[${index}][size]`, obj.size);
                    formData.append(`variant[${index}][price]`, obj.price);
                    formData.append(`variant[${index}][stock]`, obj.stock);
                });
                const imageInputs = [
                    document.getElementById('images-1'),
                    document.getElementById('images-2'),
                    document.getElementById('images-3'),
                    document.getElementById('images-4'),
                ];
                
                imageInputs.forEach((input, index) => {
                    const files = input.files;
                    for (let i = 0; i < files.length; i++) {
                        formData.append(`images`, files[i]);
                    }
                });

                //Console form data
                for (let [key, value] of formData.entries()) {
                    console.log(key + ': ', value);
                }
                //form data end

                console.log('to post')
                showSpinner()
                fetch('/admin/addProduct', {
                    method: "POST",
                    body: formData
                }).then(res => res.json())
                    .then(data => {
                        console.log("inside swal")
                        Swal.fire({
                            title: 'Success!',
                            text: 'Product adeded successfully!',
                            icon: 'success',
                            confirmButtonText: 'Okay'
                        }).then(() => {
                            console.log('reloading page....')
                            window.location.reload(); // Reload the page after success
                        });
                    })
                    .catch(err => {
                        console.error('Error:', err);
                        Swal.fire({
                            title: 'Error!',
                            text: 'Failed to add product.',
                            icon: 'error',
                            confirmButtonText: 'Okay'
                        });
                    }).finally(()=>{
                        hideSpinner()
                    })
            }
        })




    </script>
    <script>
        let variantArray = [];

        document.getElementById("saveProductChanges").addEventListener("click", () => {


            let obj = {
                size: document.getElementById("varientSize").value,
                stock: document.getElementById("varientStock").value,
                price: document.getElementById("varientPrice").value
            }
            console.log(obj);

            variantArray.push(obj)
            saveChanges()

        })



        function saveChanges() {
            

            let tbody = document.getElementById("tbody")
            tbody.innerHTML = ''
            variantArray.map((item) => {

                let element = `
                    <tr>
                        <td>${item.size}</td>
                        <td>${item.stock}</td>
                        <td>₹${item.price}.00</td>
                        <td>
                            <span class="badge rounded-pill alert-success">Added</span>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm"
                                onclick="deleteItem()">Delete</button>
                        </td>
                    </tr>
                `
                tbody.innerHTML += element
            })
        }

    </script>
    
    <script>
        let cropper;
        let activeInputId;

        for (let i = 1; i <= 4; i++) {
            const imageInput = document.getElementById(`images-${i}`);
            const previewDiv = document.getElementById(`preview-${i}`);
            const cropButton = document.getElementById(`cropButton-${i}`);

            // Display uploaded image and prepare for cropping
            imageInput.addEventListener('change', (event) => {
                event.preventDefault()
                const file = event.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        previewDiv.innerHTML = `<img src="${e.target.result}" alt="Uploaded Image" style="max-width: 100%; max-height: 150px;">`;
                    };
                    reader.readAsDataURL(file);
                } else {
                    previewDiv.innerHTML = "No image uploaded";
                }
            });

            // Set up cropper when "Crop" button is clicked
            cropButton.addEventListener('click', () => {
                const file = imageInput.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const canvas = document.getElementById('cropCanvas');
                        const ctx = canvas.getContext('2d');

                        const image = new Image();
                        image.onload = () => {
                            canvas.width = image.width;
                            canvas.height = image.height;
                            ctx.clearRect(0, 0, canvas.width, canvas.height);
                            ctx.drawImage(image, 0, 0);

                            // Initialize Cropper.js
                            if (cropper) cropper.destroy();
                            cropper = new Cropper(canvas, {
                                aspectRatio: 1,
                                viewMode: 2,
                            });

                            activeInputId = `images-${i}`;
                        };
                        image.src = e.target.result;
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        // Save cropped image and update preview
        document.getElementById('saveCrop').addEventListener('click', (e) => {
            e.preventDefault()
            if (cropper) {
                const canvas = cropper.getCroppedCanvas();
                const croppedImageURL = canvas.toDataURL('image/png');

                // Update the preview div with cropped image
                const previewDiv = document.getElementById(`preview-${activeInputId.split('-')[1]}`);
                previewDiv.innerHTML = `<img src="${croppedImageURL}" alt="Cropped Image" style="max-width: 100%; max-height: 150px;">`;

                // Convert the cropped image to a Blob for backend submission
                canvas.toBlob((blob) => {
                    const file = new File([blob], 'cropped-image.png', { type: 'image/png' });
                    document.getElementById(activeInputId).files = createFileList([file]);
                });

                // Close the modal
                const cropModal = bootstrap.Modal.getInstance(document.getElementById('cropModal'));
                cropModal.hide();
            }
        });

        // Helper function to create a FileList object
        function createFileList(files) {
            const dataTransfer = new DataTransfer();
            files.forEach((file) => dataTransfer.items.add(file));
            return dataTransfer.files;
        }
    </script>
    <script>
        const loadingSpinner = document.getElementById('loading-spinner');
        function showSpinner() {
            loadingSpinner.style.display = 'block';
        }
        function hideSpinner() {
            loadingSpinner.style.display = 'none';
        }
    </script>
    </body>

    </html>